import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../app/app.dart';import '../../../app/router.dart';import '../../../common/repository/network_result.dart';import '../../../common/services/utils/utils.dart';import '../../../db/cache.dart';import '../block/saved_lessons_bloc.dart';import '../model/saved_lessons_event.dart';import '../repository/saved_lessons_repository.dart';class SavedLessonsPageWithRepo extends StatefulWidget {  const SavedLessonsPageWithRepo({super.key});  @override  State<SavedLessonsPageWithRepo> createState() => _SavedLessonsPageWithRepoState();}class _SavedLessonsPageWithRepoState extends State<SavedLessonsPageWithRepo> {  // const SavedLessonsPageWithRepo({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => SavedLessonsBloc(context.read<SavedLessonsRepository>()),      child: const SavedLessonsScreen(),    );  }}class SavedLessonsScreen extends StatefulWidget {  const SavedLessonsScreen({super.key});  @override  State<SavedLessonsScreen> createState() => _SavedLessonsScreen();}class _SavedLessonsScreen extends State<SavedLessonsScreen> {  late SavedLessonsBloc _lessonsBloc;  @override  void initState() {    _lessonsBloc = BlocProvider.of<SavedLessonsBloc>(context);    _lessonsBloc.add(SavedLessonsEventData()); // getLocation();    super.initState();  }  List<Map<String, dynamic>> data = [];  @override  Widget build(BuildContext context) {    return Scaffold(        backgroundColor: Utils.backColor,        body: BlocConsumer<SavedLessonsBloc, NetworkResult>(listener: (context, state) {          if (state is Error) {            // hideLoading();            if (state.code == 401) {              cache.clear();              router.go(Routes.login);            }            snack(context, state.message.toString());          } else if (state is Success) {          } else if (state is Loading) {            // showLoading(context);          } else {            // hideLoading(); snack(context, state.message.toString());          }        }, builder: (context, state) {          if (state is Success) {            final List<Map<String, dynamic>> lessonsData = List<Map<String, dynamic>>.from(state.data["data"]);            if (lessonsData.isEmpty) {              return Center(child: Text("not_found_saved_topics".tr(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));            }            return ListView.builder(              itemCount: lessonsData.length,              itemBuilder: (context, index) {                return LessonItem(lessonData: lessonsData[index]);              },            );          } else if (state is Loading) {            return Center(child: Text("loading".tr()));          } else {            return Center(child: Text(state.message.toString()));          }        }));  }}class LessonItem extends StatefulWidget {  final Map<String, dynamic> lessonData;  const LessonItem({required this.lessonData});  @override  State<LessonItem> createState() => _LessonItemState();}class _LessonItemState extends State<LessonItem> {  @override  Widget build(BuildContext context) {    var percent = 0;    var topicAction = widget.lessonData["topic"]["student_topic_action"];    kprint("topicAction-> $topicAction");    var topicLimit = widget.lessonData["topic"]["topic_action_limit"];    kprint("topicLimit-> $topicLimit");    if (topicAction != null && topicLimit != null) {      setState(() {        percent = (((topicAction["reading_time"] ?? 0) / (topicLimit["time_limit"] ?? 1)) * 100).toInt();        percent = percent > 100 ? 100 : percent;      });    }    Color _getProgressBarColor(int percentage) {      if (percentage >= 90) {        return Colors.green;      } else if (percentage >= 60) {        return Colors.blue;      } else {        return Colors.yellow;      }    }    return InkWell(        onTap: () {        },        child: Card(          color: Colors.white,          elevation: 0,          shape: RoundedRectangleBorder(            borderRadius: BorderRadius.circular(0),          ),          child: Padding(            padding: const EdgeInsets.symmetric(vertical: 8.0),            child: ListTile(              contentPadding: EdgeInsets.fromLTRB(12, 8, 8, 8),              leading: Stack(                alignment: Alignment.center,                children: [                  Container(                    width: 44,                    height: 44,                    child: CircularProgressIndicator(                      value: percent / 100,                      strokeWidth: 3,                      backgroundColor: Colors.grey[300],                      valueColor: AlwaysStoppedAnimation<Color>(_getProgressBarColor(percent)),                    ),                  ),                  Positioned(                    child: Text(                      '$percent%',                      style: TextStyle(                        fontFamily: 'Montserrat',                        fontWeight: FontWeight.w500,                        color: Colors.black,                        fontSize: 13,                      ),                    ),                  ),                ],              ),              title: Text(                widget.lessonData["topic"]["name"]["uz"].toString() ?? "Null bo'lib qoldi",                style: TextStyle(                  fontFamily: 'Montserrat',                  fontWeight: FontWeight.w500,                  color: Colors.black,                  fontSize: 14,                ),              ),            ),          ),        ));  }}