import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intalim/app/router.dart';import 'package:intalim/db/cache.dart';import 'package:intalim/features/lessons/model/lessons_event.dart';import '../../../app/app.dart';import '../../../common/repository/network_result.dart';import '../block/lessons_bloc.dart';import '../repository/lessons_repository.dart';class LessonsPageWithRepo extends StatelessWidget {  const LessonsPageWithRepo({super.key});  // const LessonsPageWithRepo({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => LessonsBloc(context.read<LessonsRepository>()),      child: const LessonsScreen(),    );  }}class LessonsScreen extends StatefulWidget {  const LessonsScreen({super.key});  @override  State<LessonsScreen> createState() => _LessonsScreen();}class _LessonsScreen extends State<LessonsScreen> {  late LessonsBloc _lessonsBloc;  @override  void initState() {    _lessonsBloc = BlocProvider.of<LessonsBloc>(context);    _lessonsBloc.add(LessonsEventData());    // getLocation();    super.initState();  }  // List<Map<String, dynamic>> data = [];  @override  Widget build(BuildContext context) {    return Scaffold(        backgroundColor: Colors.white38,        body: BlocConsumer<LessonsBloc, NetworkResult>(listener: (context, state) {          if (state is Error) {            // hideLoading();            if (state.code == 401) {              cache.clear();              router.go(Routes.login);            }            snack(context, state.message.toString());          } else if (state is Success) {            // hideLoading();          } else if (state is Loading) {            // showLoading(context);          } else {            // hideLoading();            snack(context, state.message.toString());          }        }, builder: (context, state) {          if (state is Success) {            final List<Map<String, dynamic>> lessonsData = List<Map<String, dynamic>>.from(state.data["data"]);            return ListView.builder(              itemCount: lessonsData.length,              itemBuilder: (context, index) {                return LessonItem(lessonData: lessonsData[index]);              },            );          } else if (state is Loading) {            return const Center(child: Text("Loading..."));          } else {            return const Center(child: Text(""));          }        }));  }}class LessonItem extends StatelessWidget {  final Map<String, dynamic> lessonData;  const LessonItem({required this.lessonData});  // final Map<String, dynamic> data2;  @override  Widget build(BuildContext context) {    return Card(      margin: EdgeInsets.all(8.0),      color: Colors.white,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.all(Radius.circular(8.0)),      ),      elevation: 2.0,      child: InkWell(        onTap: () {          // Handle card tap        },        child: Padding(          padding: EdgeInsets.all(8.0),          child: Row(            children: [              Image.asset(                'assets/images/lesson_icon.png',                width: 40.0,                height: 40.0,                fit: BoxFit.cover,              ),              Expanded(                child: Padding(                  padding: EdgeInsets.all(8.0),                  child: Text(                    lessonData["lesson"]["name"]["uz"].toString() ?? "Null bo'lib qoldi",                    style: TextStyle(                      fontFamily: 'Montserrat',                      fontWeight: FontWeight.w600,                      color: Colors.black,                      fontSize: 14.0,                    ),                  ),                ),              ),              Image.asset(                'assets/images/more.png', // Replace with your image asset path                width: 30.0,                height: 30.0,                fit: BoxFit.cover,              ),            ],          ),        ),      ),    );  }}