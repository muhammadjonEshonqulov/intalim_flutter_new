import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../app/router.dart';import '../../../common/services/utils/utils.dart';import '../../../common/widgets/appbar.dart';import '../../templateTest/block/template_tests_bloc.dart';import '../../templateTest/model/template_test_data.dart';import '../../templateTest/repository/template_tests_repository.dart';import '../model/subject_tests_event.dart';class TemplatesPageWithRepo extends StatelessWidget {  const TemplatesPageWithRepo({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => TemplateTestsBloc(context.read<TemplatesRepository>()),      child: const TemplatesScreen(),    );  }}class TemplatesScreen extends StatefulWidget {  const TemplatesScreen({super.key});  @override  State<TemplatesScreen> createState() => _TemplatesScreen();}class _TemplatesScreen extends State<TemplatesScreen> {  late TemplateTestsBloc _templateTestsBloc;  @override  void initState() {    _templateTestsBloc = BlocProvider.of<TemplateTestsBloc>(context);    _templateTestsBloc.add(TemplateTestsEventData());    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(        child: Scaffold(            appBar: PreferredSize(              preferredSize: Size.fromHeight(100.0),              child: CustomAppBar(titleName: "template_test".tr()),            ),            backgroundColor: Utils.backColor,            body: StreamBuilder<List<TemplateTestData>>(              stream: _templateTestsBloc.templateTestFromLocal,              builder: (context, snapshot) {                if (snapshot.hasData) {                  final tasks = snapshot.data;                  return GridView.builder(                    physics: ScrollPhysics(),                    shrinkWrap: true,                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(                      crossAxisCount: 3,                      childAspectRatio: (3 / 2),                    ),                    itemCount: tasks?.length,                    itemBuilder: (context, index) {                      return TemplateItem(templateTestData: tasks![index]);                    },                  );                } else {                  return Center(child: Text("loading".tr()));                }              },            )));  }}class TemplateItem extends StatelessWidget {  final TemplateTestData templateTestData;  const TemplateItem({required this.templateTestData});  @override  Widget build(BuildContext context) {    kprint("${templateTestData.maxResultCorrects}->${templateTestData.questionCount}->${(templateTestData.maxResultCorrects?.toDouble()??0) / (templateTestData.questionCount??0).toDouble()}");    return Card(      margin: EdgeInsets.all(8.0),      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.circular(8.0),      ),      elevation: 0.0,      child: InkWell(        onTap: () {          router.push(              Routes.startTest,              extra: {                "testId": templateTestData.id,                "typeId": 1,                "testName":  'ticket'.tr() + templateTestData.name.toString(),              }          );        },        child: Column(          mainAxisSize: MainAxisSize.min,          children: [            Padding(              padding: const EdgeInsets.all(8.0),              child: Row(                mainAxisAlignment: MainAxisAlignment.center,                children: [                  Text(                    '${templateTestData.maxResultCorrects ?? 0}',                    style: TextStyle(                      fontFamily: 'Montserrat',                      fontWeight: FontWeight.w500,                      color: Colors.black,                      fontSize: 16.0,                    ),                  ),                  Text(                    ' / 20',                    style: TextStyle(                      fontFamily: 'Montserrat',                      fontWeight: FontWeight.w500,                      color: Colors.black,                      fontSize: 16.0,                    ),                  ),                ],              ),            ),            Container(              width: 50,              child: ClipRRect(                  borderRadius: BorderRadius.circular(8.0),                  child: LinearProgressIndicator(                    value: (templateTestData.maxResultCorrects?.toDouble()??0) / (templateTestData.questionCount??0).toDouble(),                    minHeight: 5.0,                    backgroundColor: Colors.grey,                    valueColor: AlwaysStoppedAnimation<Color>(Colors.red),                  )),            ),            SizedBox(              height: 8.0,            ),            Text(              'ticket'.tr() + templateTestData.name.toString() ?? "",              style: TextStyle(                fontFamily: 'Montserrat',                fontWeight: FontWeight.w500,                color: Colors.black,                fontSize: 12.0,              ),            ),          ],        ),      ),    );    //   Card(    //   margin: EdgeInsets.all(8.0),    //   color: Colors.white,    //   shape: RoundedRectangleBorder(    //     borderRadius: BorderRadius.all(Radius.circular(8.0)),    //   ),    //   elevation: 0.0,    //   child: InkWell(    //     onTap: () {    //       // router.push(    //       //   Routes.topic,    //       //   //     extra: {    //       //   //   "eduTypeTemplateId": templateTestData?.id,    //       //   //   "eduTypeTemplateName": templateTestName.uz?.toString() ?? "",    //       //   // }    //       // );    //     },    //     child: Padding(    //       padding: EdgeInsets.all(8.0),    //       child: Row(    //         children: [    //           Image.asset(    //             'assets/images/subject_test.png',    //             width: 40.0,    //             height: 40.0,    //             fit: BoxFit.cover,    //           ),    //           Expanded(    //             child: Column(    //               crossAxisAlignment: CrossAxisAlignment.start,    //               children: [    //                 Padding(    //                   padding: EdgeInsets.only(left: 8.0, right: 8.0),    //                   child: Text(    //                     templateTestData?.name.toString() ?? "",    //                     style: TextStyle(    //                       fontFamily: 'Montserrat',    //                       fontWeight: FontWeight.w600,    //                       color: Colors.black,    //                       fontSize: 14.0,    //                     ),    //                   ),    //                 ),    //                 Padding(    //                   padding: EdgeInsets.only(left: 8.0, right: 8.0, top: 4, bottom: 4),    //                   child: Text(    //                     "${"be_finished".tr()} ${(((templateTestData?.questionCount ?? 0).toDouble() / (templateTestData?.questionCount ?? 1).toDouble()) * 100).toInt()}%",    //                     style: TextStyle(    //                       fontFamily: 'Montserrat',    //                       fontWeight: FontWeight.w600,    //                       color: Utils.defTextColor,    //                       fontSize: 14.0,    //                     ),    //                   ),    //                 ),    //               ],    //             ),    //           ),    //           // Image.asset(    //           //   'assets/images/more.png',    //           //   width: 30.0,    //           //   height: 30.0,    //           //   fit: BoxFit.cover,    //           // ),    //         ],    //       ),    //     ),    //   ),    // );  }}