import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intalim/common/services/utils/utils.dart';import 'package:intalim/common/widgets/appbar.dart';import '../../../app/app.dart';import '../../../common/repository/network_result.dart';import '../block/topics_bloc.dart';import '../model/topics_event.dart';import '../repository/topics_repository.dart';class TopicsPageWithRepo extends StatelessWidget {  const TopicsPageWithRepo({required this.eduTypeLessonId, required this.eduTypeLessonName, super.key});  final int eduTypeLessonId;  final String eduTypeLessonName;  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => TopicsBloc(context.read<TopicsRepository>()),      child: TopicsScreen(        eduTypeLessonId: eduTypeLessonId,        eduTypeLessonName: eduTypeLessonName,      ),    );  }}class TopicsScreen extends StatefulWidget {  const TopicsScreen({required this.eduTypeLessonId,required this.eduTypeLessonName, super.key});  final int eduTypeLessonId;  final String eduTypeLessonName;  @override  State<TopicsScreen> createState() => _TopicsScreen();}class _TopicsScreen extends State<TopicsScreen> {  late TopicsBloc _topicsBloc;  @override  void initState() {    _topicsBloc = BlocProvider.of<TopicsBloc>(context);    _topicsBloc.add(TopicsEventData(widget.eduTypeLessonId)); // getLocation();    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(        child: Scaffold(            appBar: PreferredSize(              preferredSize: Size.fromHeight(1000.0),              child: CustomAppBar(titleName: widget.eduTypeLessonName),            ),            backgroundColor: Colors.white,            body: BlocConsumer<TopicsBloc, NetworkResult>(listener: (context, state) {              if (state is Error) {                // hideLoading(); kprint("state.message -> ${state.message}"); // if (state.code == 401) {                //   cache.clear(); //   router.go(Routes.login); // } snack(context, state.message.toString());              } else if (state is Success) {                kprint("state.data -> ${state.data}"); // hideLoading();              } else if (state is Loading) {                kprint("showLoading..."); // showLoading(context);              } else {                // hideLoading(); kprint("else.message -> ${state.message}");                snack(context, state.message.toString());              }            }, builder: (context, state) {              if (state is Success) {                final List<Map<String, dynamic>> topicsData = List<Map<String, dynamic>>.from(state.data["data"]);                if (topicsData.isEmpty) {                  return Center(child: Text("not_found_topics".tr(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));                }                return ListView.builder(                  itemCount: topicsData.length,                  itemBuilder: (context, index) {                    return TopicItem(topicData: topicsData[index]);                  },                );              } else if (state is Loading) {                return Center(child: Text("loading".tr()));              } else {                return Center(child: Text(state.message.toString(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));              }            })));  }}class TopicItem extends StatefulWidget {  final Map<String, dynamic> topicData;  const TopicItem({required this.topicData});  @override  State<TopicItem> createState() => _TopicItemState();}class _TopicItemState extends State<TopicItem> {  @override  Widget build(BuildContext context) {    var percent = 0;    var topicAction = widget.topicData["student_topic_action"];    kprint("topicAction-> $topicAction");    var topicLimit = widget.topicData["topic_action_limit"];    kprint("topicLimit-> $topicLimit");    if (topicAction != null && topicLimit != null) {      setState(() {        percent = (((topicAction["reading_time"] ?? 0) / (topicLimit["time_limit"] ?? 1)) * 100).toInt();        percent = percent > 100 ? 100 : percent;      });    }    Color _getProgressBarColor(int percentage) {      if (percentage >= 90) {        return Colors.green;      } else if (percentage >= 60) {        return Colors.blue;      } else {        return Colors.yellow;      }    }    return Card(      color: Colors.white,      elevation: 0,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.circular(0),      ),      child: InkWell(        onTap: () {        },        child: Padding(          padding: const EdgeInsets.symmetric(vertical: 4.0),          child: ListTile(            contentPadding: EdgeInsets.fromLTRB(12, 0, 8, 0),            leading: Stack(              alignment: Alignment.center,              children: [                Container(                  width: 44,                  height: 44,                  child: CircularProgressIndicator(                    value: percent / 100,                    strokeWidth: 3,                    backgroundColor: Colors.grey[300],                    valueColor: AlwaysStoppedAnimation<Color>(_getProgressBarColor(percent)),                  ),                ),                Positioned(                  child: Text(                    '$percent%',                    style: TextStyle(                      fontFamily: 'Montserrat',                      fontWeight: FontWeight.w500,                      color: Colors.black,                      fontSize: 13,                    ),                  ),                ),              ],            ),            title: Text(              widget.topicData["name"]["uz"].toString(),              style: TextStyle(                fontFamily: 'Montserrat',                fontWeight: FontWeight.w500,                color: Colors.black,                fontSize: 14,              ),            ),          ),        ),      ),    );  }}