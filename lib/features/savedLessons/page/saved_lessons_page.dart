import 'dart:convert';import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intalim/features/savedLessons/model/saved_lesson_data.dart';import '../../../app/router.dart';import '../../../common/services/utils/utils.dart';import '../../lessons/model/lesson_data.dart';import '../block/saved_lessons_bloc.dart';import '../model/saved_lessons_event.dart';import '../repository/saved_lessons_repository.dart';class SavedLessonsPageWithRepo extends StatefulWidget {  const SavedLessonsPageWithRepo({super.key});  @override  State<SavedLessonsPageWithRepo> createState() => _SavedLessonsPageWithRepoState();}class _SavedLessonsPageWithRepoState extends State<SavedLessonsPageWithRepo> {  // const SavedLessonsPageWithRepo({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => SavedLessonsBloc(context.read<SavedLessonsRepository>()),      child: const SavedLessonsScreen(),    );  }}class SavedLessonsScreen extends StatefulWidget {  const SavedLessonsScreen({super.key});  @override  State<SavedLessonsScreen> createState() => _SavedLessonsScreen();}class _SavedLessonsScreen extends State<SavedLessonsScreen> {  late SavedLessonsBloc _lessonsBloc;  @override  void initState() {    _lessonsBloc = BlocProvider.of<SavedLessonsBloc>(context);    _lessonsBloc.add(SavedLessonsEventData());    super.initState();  }  @override  Widget build(BuildContext context) {    return Scaffold(        backgroundColor: Utils.backColor,        body: StreamBuilder<List<SavedLessonData>>(          stream: _lessonsBloc.savedLessonsFromLocal,          builder: (context, snapshot) {            if (snapshot.hasData) {              final tasks = snapshot.data;              return ListView.builder(                itemCount: tasks?.length,                itemBuilder: (context, index) {                  return LessonItem(lessonData: tasks?[index]);                },              );            } else {              return Center(child: Text("loading".tr()));            }          },        ));    // Scaffold(    //   backgroundColor: Utils.backColor,    //   body: BlocConsumer<SavedLessonsBloc, NetworkResult>(listener: (context, state) {    //     if (state is Error) {    //       if (state.code == 401) {    //         router.go(Routes.login);    //       }    //       snack(context, state.message.toString());    //     } else if (state is Success) {    //     } else if (state is Loading) {    //     } else {    //    //     }    //   }, builder: (context, state) {    //     if (state is Success) {    //       final List<Map<String, dynamic>> lessonsData = List<Map<String, dynamic>>.from(state.data["data"]);    //       if (lessonsData.isEmpty) {    //         return Center(child: Text("not_found_saved_topics".tr(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));    //       }    //       return ListView.builder(    //         itemCount: lessonsData.length,    //         itemBuilder: (context, index) {    //           return LessonItem(lessonData: lessonsData[index]);    //         },    //       );    //     } else if (state is Loading) {    //       return Center(child: Text("loading".tr()));    //     } else {    //       return Center(child: Text(state.message.toString()));    //     }    //   }));  }}class LessonItem extends StatefulWidget {  // final Map<String, dynamic> lessonData;  final SavedLessonData? lessonData;  const LessonItem({required this.lessonData});  @override  State<LessonItem> createState() => _LessonItemState();}class _LessonItemState extends State<LessonItem> {  @override  Widget build(BuildContext context) {    var percent = 0;    Name lessonName = Name.fromJson(json.decode(widget.lessonData?.topic ?? ""));    var p = (((widget.lessonData?.readingTime ?? 0) / (widget.lessonData?.timeLimit ?? 1)) * 100).toInt();    p = p > 100 ? 100 : p;    setState(() {      percent = p;    });    Color _getProgressBarColor(int percentage) {      if (percentage >= 90) {        return Colors.green;      } else if (percentage >= 60) {        return Colors.blue;      } else {        return Colors.yellow;      }    }    return Card(      color: Colors.white,      elevation: 0,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.circular(0),      ),      child: InkWell(        onTap: ()  {          router.push(Routes.content, extra: {            "topicId": widget.lessonData?.topicId ?? 0,            "topicName": lessonName.uz,          });        },        child: Padding(          padding: const EdgeInsets.symmetric(vertical: 8.0),          child: ListTile(            contentPadding: EdgeInsets.fromLTRB(12, 8, 8, 8),            leading: Stack(              alignment: Alignment.center,              children: [                Container(                  width: 44,                  height: 44,                  child: CircularProgressIndicator(                    value: percent / 100,                    strokeWidth: 3,                    backgroundColor: Colors.grey[300],                    valueColor: AlwaysStoppedAnimation<Color>(_getProgressBarColor(percent)),                  ),                ),                Positioned(                  child: Text(                    '$percent%',                    style: TextStyle(                      fontFamily: 'Montserrat',                      fontWeight: FontWeight.w500,                      color: Colors.black,                      fontSize: 13,                    ),                  ),                ),              ],            ),            title: Text(              lessonName.uz ?? "",              style: TextStyle(                fontFamily: 'Montserrat',                fontWeight: FontWeight.w500,                color: Colors.black,                fontSize: 14,              ),            ),          ),        ),      ),    );  }}