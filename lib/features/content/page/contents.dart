import 'dart:convert';import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_html/flutter_html.dart';import 'package:http/http.dart' as http;import 'package:intalim/app/router.dart';import 'package:intalim/common/services/utils/utils.dart';import 'package:intalim/features/content/model/content_data.dart';import 'package:video_player/video_player.dart';import '../../../common/widgets/marquee_widget.dart';import '../../lessons/model/lesson_data.dart';import '../block/content_bloc.dart';import '../model/content_event.dart';import '../repository/content_repository.dart';class ContentPageWithRepo extends StatelessWidget {  const ContentPageWithRepo({required this.topicId, required this.topicName, super.key});  final int topicId;  final String topicName;  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => ContentBloc(context.read<ContentRepository>()),      child: ContentScreen(        topicId: topicId,        topicName: topicName,      ),    );  }}class ContentScreen extends StatefulWidget {  const ContentScreen({required this.topicId, required this.topicName, super.key});  final int topicId;  final String topicName;  @override  State<ContentScreen> createState() => _ContentScreen();}class _ContentScreen extends State<ContentScreen> {  late ContentBloc _topicsBloc;  @override  void initState() {    _topicsBloc = BlocProvider.of<ContentBloc>(context);    kprint("widget.topicId -> ${widget.topicId}");    _topicsBloc.add(ContentEventData(widget.topicId));    super.initState();  }  @override  void dispose() {    _topicsBloc.close();    super.dispose();  }  @override  Widget build(BuildContext context) {    return SafeArea(        child: Scaffold(            appBar: PreferredSize(              preferredSize: Size.fromHeight(100.0),              child: Card(                elevation: 2.0, // cardElevation                shape: RoundedRectangleBorder(                  borderRadius: BorderRadius.circular(0.0),                ),                child: Container(                  height: kToolbarHeight,                  child: Row(                    children: [                      InkWell(                        onTap: () {                          finish(context);                        },                        child: Container(                          padding: EdgeInsets.all(16.0),                          child: Image.asset('assets/images/back_btn.png'),                        ),                      ),                      Expanded(                        child: SingleChildScrollView(                          padding: EdgeInsets.only(right: 16.0),                          scrollDirection: Axis.horizontal,                          child: MarqueeWidget(                              direction: Axis.horizontal,                              child: Text(                                widget.topicName,                                style: TextStyle(                                  fontFamily: 'Montserrat',                                  color: Colors.black,                                  fontSize: 16.0,                                  fontWeight: FontWeight.w600,                                ),                              )),                        ),                      ),                      InkWell(                        onTap: () {},                        child: Padding(                          padding: const EdgeInsets.all(4.0),                          child: SizedBox(width: 20, height: 20, child: Image.asset("assets/images/saved.png")),                        ),                      ),                      InkWell(                        onTap: () {},                        child: Padding(                          padding: const EdgeInsets.all(4.0),                          child: SizedBox(width: 20, height: 20, child: Image.asset("assets/images/search.png")),                        ),                      ),                      InkWell(                        onTap: () {},                        child: Padding(                          padding: const EdgeInsets.all(4.0),                          child: SizedBox(width: 20, height: 20, child: Image.asset("assets/images/filter.png")),                        ),                      ),                    ],                  ),                ),              ),            ),            backgroundColor: Colors.white,            body: StreamBuilder<List<ContentData>>(              stream: _topicsBloc.contentsFromLocal,              builder: (context, snapshot) {                if (snapshot.hasData) {                  final tasks = snapshot.data;                  return ListView.builder(                    itemCount: tasks?.length,                    itemBuilder: (context, index) {                      return ContentItem(contentData: tasks?[index]);                    },                  );                } else {                  return Center(child: Text("loading".tr()));                }              },            )            // BlocConsumer<ContentBloc, NetworkResult>(listener: (context, state) {            //   if (state is Error) {            //     snack(context, state.message.toString());            //   } else if (state is Success) {            //     kprint("state.data -> ${state.data}");            //   } else if (state is Loading) {            //     kprint("showLoading...");            //   } else {            //     snack(context, state.message.toString());            //   }            // }, builder: (context, state) {            //   if (state is Success) {            //     final List<Map<String, dynamic>> topicsData = List<Map<String, dynamic>>.from(state.data["data"]);            //     if (topicsData.isEmpty) {            //       return Center(child: Text("not_found_content".tr(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));            //     }            //     return ListView.builder(            //       itemCount: topicsData.length,            //       itemBuilder: (context, index) {            //         return ContentItem(topicData: topicsData[index]);            //       },            //     );            //   } else if (state is Loading) {            //     return Center(child: Text("loading".tr()));            //   } else {            //     return Center(child: Text(state.message.toString(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));            //   }            // }            //            // )            ));  }}class ContentItem extends StatefulWidget {  final ContentData? contentData;  const ContentItem({required this.contentData});  @override  State<ContentItem> createState() => _ContentItemState();}class _ContentItemState extends State<ContentItem> {  late VideoPlayerController _controller;  @override  void initState() {    super.initState();    Name name = Name.fromJson(json.decode(widget.contentData?.content ?? ""));    if (widget.contentData?.topicId == 2) {      _controller = VideoPlayerController.networkUrl(Uri.parse(Routes.baseUrlImage + name.uz.toString()))        ..initialize().then((_) {          setState(() {});        });    }  }  @override  void dispose() {    super.dispose();    _controller.dispose();  }  @override  Widget build(BuildContext context) {    Name name = Name.fromJson(json.decode(widget.contentData?.content ?? ""));    if (widget.contentData?.typeId == 4) {      return Card(        margin: EdgeInsets.all(5),        color: const Color(0xFFF9F9F9),        shape: RoundedRectangleBorder(          borderRadius: BorderRadius.circular(16),        ),        child: Container(          padding: EdgeInsets.all(16),          child: Row(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Container(                width: 40,                height: 40,                margin: EdgeInsets.only(right: 16),                decoration: BoxDecoration(                  shape: BoxShape.circle,                  color: Color(0x80000000),                ),                child: Stack(                  children: [                    Center(                      child: Icon(                        Icons.music_note,                        color: Colors.white,                      ),                    ),                    Positioned(                      top: 0,                      left: 0,                      child: Container(                        width: 18,                        height: 18,                        decoration: BoxDecoration(                          shape: BoxShape.circle,                          color: Color(0x80000000),                        ),                        child: Icon(                          Icons.download,                          color: Colors.white,                          size: 12,                        ),                      ),                    ),                    Positioned.fill(                      child: CircularProgressIndicator(                        value: 0.5,                        strokeWidth: 2,                        valueColor: AlwaysStoppedAnimation<Color>(Colors.white),                      ),                    ),                  ],                ),              ),              Expanded(                child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    Text(                      "Kosinuslar teoremasi",                      style: TextStyle(                        fontSize: 18,                        fontWeight: FontWeight.bold,                      ),                    ),                    SizedBox(height: 4),                    Text(                      "3 MB AUDIO",                      style: TextStyle(fontSize: 14, color: Colors.grey),                    ),                  ],                ),              ),            ],          ),        ),      );    } else if (widget.contentData?.typeId == 3) {      return Card(        color: Colors.white,        elevation: 0,        shape: RoundedRectangleBorder(          borderRadius: BorderRadius.circular(0),        ),        child: InkWell(          onTap: () {},          child: Padding(            padding: const EdgeInsets.only(left: 50.0, right: 50.0, top: 4.0, bottom: 4.0),            child: Image.network(              Routes.baseUrlImage + name.uz.toString(),              loadingBuilder: (BuildContext context, Widget child, ImageChunkEvent? loadingProgress) {                if (loadingProgress == null) {                  return child;                } else {                  return Stack(children: [const Center(child: CircularProgressIndicator()), Image.asset('assets/images/place_holder.png', fit: BoxFit.cover)]);                }              },              errorBuilder: (context, error, stackTrace) {                return Image.asset('assets/images/place_holder.png', fit: BoxFit.cover);              },              fit: BoxFit.contain,            ),          ),        ),      );    } else if (widget.contentData?.typeId == 2) {      return Container(height: 300, child: VideoPlayerScreen(videoUrl: Routes.baseUrlImage + name.uz.toString()));    } else {      return Card(        color: Colors.white,        elevation: 0,        shape: RoundedRectangleBorder(          borderRadius: BorderRadius.circular(0),        ),        child: InkWell(          onTap: () {},          child: Padding(            padding: const EdgeInsets.only(left: 4.0, right: 4.0),            child: ListTile(              contentPadding: EdgeInsets.fromLTRB(0, 0, 0, 0),              title: Html(                data: name.uz.toString(),                style: {                  'ul': Style(                    listStyleType: ListStyleType.none,                    margin: Margins.only(left: 10, right: 10),                    padding: HtmlPaddings.zero,                  ),                  'li': Style(                    listStyleType: ListStyleType.none,                    margin: Margins.zero,                    padding: HtmlPaddings.zero,                  ),                  'p': Style(                    margin: Margins.zero,                    padding: HtmlPaddings.zero,                    listStyleType: ListStyleType.none,                  ),                },              ),            ),          ),        ),      );    }  }}class VideoPlayerScreen extends StatefulWidget {  final String videoUrl;  VideoPlayerScreen({required this.videoUrl});  @override  _VideoPlayerScreenState createState() => _VideoPlayerScreenState();}class _VideoPlayerScreenState extends State<VideoPlayerScreen> {  late VideoPlayerController _controller;  @override  void initState() {    super.initState();    _controller = VideoPlayerController.networkUrl(Uri.parse(widget.videoUrl));    _initializeController();  }  void _initializeController() async {    await _controller.initialize();    setState(() {});  }  @override  void dispose() {    _controller.dispose();    super.dispose();  }  Future<String> getVideoSize(String videoUrl) async {    try {      final response = await http.head(Uri.parse(videoUrl));      return "${((int.parse(response.headers['content-length'] ?? '0')) / (1024 * 1024)).toStringAsFixed(2)} MB";    } catch (e) {      print('Error getting video size: $e');      return "0 MB";    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      body: Center(        child: _controller.value.isInitialized            ? Column(                mainAxisAlignment: MainAxisAlignment.center,                children: [                  AspectRatio(                    aspectRatio: _controller.value.aspectRatio,                    child: VideoPlayer(_controller),                  ),                  SizedBox(height: 16),                  FutureBuilder(                    future: getVideoSize(widget.videoUrl),                    builder: (context, snapshot) {                      if (snapshot.connectionState == ConnectionState.done) {                        // int fileSizeInBytes = snapshot.data as int;                        // double fileSizeInMB = fileSizeInBytes / (1024 * 1024);                        return Text(                          'Video Size: ${snapshot.data}',                          style: TextStyle(fontSize: 16),                        );                      } else {                        return Container();                      }                    },                  ),                ],              )            : Container(),      ),      floatingActionButton: FloatingActionButton(        onPressed: () {          setState(() {            _controller.value.isPlaying ? _controller.pause() : _controller.play();          });        },        child: Icon(          _controller.value.isPlaying ? Icons.pause : Icons.play_arrow,        ),      ),    );  }}