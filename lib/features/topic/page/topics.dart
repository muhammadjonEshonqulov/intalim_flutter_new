import 'dart:convert';import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intalim/app/router.dart';import 'package:intalim/common/widgets/appbar.dart';import 'package:intalim/features/topic/model/topic_data.dart';import '../../../common/services/utils/utils.dart';import '../../lessons/model/lesson_data.dart';import '../block/topics_bloc.dart';import '../model/topics_event.dart';import '../repository/topics_repository.dart';class TopicsPageWithRepo extends StatelessWidget {  const TopicsPageWithRepo({required this.eduTypeLessonId, required this.eduTypeLessonName, super.key});  final int eduTypeLessonId;  final String eduTypeLessonName;  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => TopicsBloc(context.read<TopicsRepository>()),      child: TopicsScreen(        eduTypeLessonId: eduTypeLessonId,        eduTypeLessonName: eduTypeLessonName,      ),    );  }}class TopicsScreen extends StatefulWidget {  const TopicsScreen({required this.eduTypeLessonId, required this.eduTypeLessonName, super.key});  final int eduTypeLessonId;  final String eduTypeLessonName;  @override  State<TopicsScreen> createState() => _TopicsScreen();}class _TopicsScreen extends State<TopicsScreen> {  late TopicsBloc _topicsBloc;  @override  void initState() {    _topicsBloc = BlocProvider.of<TopicsBloc>(context);    _topicsBloc.add(TopicsEventData(widget.eduTypeLessonId)); // getLocation();    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(        child: Scaffold(            appBar: PreferredSize(              preferredSize: Size.fromHeight(1000.0),              child: CustomAppBar(titleName: widget.eduTypeLessonName),            ),            backgroundColor: Colors.white,            body: StreamBuilder<List<TopicData>>(              stream: _topicsBloc.topicsFromLocal,              builder: (context, snapshot) {                if (snapshot.hasData) {                  final tasks = snapshot.data;                  return ListView.builder(                    itemCount: tasks?.length,                    itemBuilder: (context, index) {                      return TopicItem(topicData: tasks?[index]);                    },                  );                } else {                  return Center(child: Text("loading".tr()));                }              },            )        )    );    // BlocConsumer<TopicsBloc, NetworkResult>(listener: (context, state) {    //   if (state is Error) {    //     //   cache.clear(); //   router.go(Routes.login); // } snack(context, state.message.toString());    //   } else if (state is Success) {    //     kprint("state.data -> ${state.data}"); // hideLoading();    //   } else if (state is Loading) {    //     kprint("showLoading..."); // showLoading(context);    //   } else {    //     snack(context, state.message.toString());    //   }    // }, builder: (context, state) {    //   if (state is Success) {    //     final List<Map<String, dynamic>> topicsData = List<Map<String, dynamic>>.from(state.data["data"]);    //     if (topicsData.isEmpty) {    //       return Center(child: Text("not_found_topics".tr(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));    //     }    //     return ListView.builder(    //       itemCount: topicsData.length,    //       itemBuilder: (context, index) {    //         return TopicItem(topicData: topicsData[index]);    //       },    //     );    //   } else if (state is Loading) {    //     return Center(child: Text("loading".tr()));    //   } else {    //     return Center(child: Text(state.message.toString(), style: const TextStyle(color: Colors.black, fontSize: 16, fontWeight: FontWeight.w400)));    //   }    // })));  }}class TopicItem extends StatefulWidget {  // final Map<String, dynamic> topicData;  final TopicData? topicData;  const TopicItem({required this.topicData});  @override  State<TopicItem> createState() => _TopicItemState();}class _TopicItemState extends State<TopicItem> {  @override  Widget build(BuildContext context) {    var percent = 0;    Name lessonName = Name.fromJson(json.decode(widget.topicData?.name ?? ""));    var p = (((widget.topicData?.readingTime ?? 0) / (widget.topicData?.timeLimit ?? 1)) * 100).toInt();    p = p > 100 ? 100 : p;      setState(() {        percent = p;      });    Color _getProgressBarColor(int percentage) {      if (percentage >= 90) {        return Colors.green;      } else if (percentage >= 60) {        return Colors.blue;      } else {        return Colors.yellow;      }    }    return Card(      color: Colors.white,      elevation: 0,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.circular(0),      ),      child: InkWell(        onTap: () {          router.push(Routes.content, extra: {            "topicId": widget.topicData?.id ?? 0,            "topicName": lessonName.uz,          });        },        child: Padding(          padding: const EdgeInsets.symmetric(vertical: 4.0),          child: ListTile(            contentPadding: EdgeInsets.fromLTRB(12, 0, 8, 0),            leading: Stack(              alignment: Alignment.center,              children: [                Container(                  width: 44,                  height: 44,                  child: CircularProgressIndicator(                    value: percent / 100,                    strokeWidth: 3,                    backgroundColor: Colors.grey[300],                    valueColor: AlwaysStoppedAnimation<Color>(_getProgressBarColor(percent)),                  ),                ),                Positioned(                  child: Text(                    '$percent%',                    style: TextStyle(                      fontFamily: 'Montserrat',                      fontWeight: FontWeight.w500,                      color: Colors.black,                      fontSize: 13,                    ),                  ),                ),              ],            ),            title: Text(              lessonName.uz.toString(),              style: TextStyle(                fontFamily: 'Montserrat',                fontWeight: FontWeight.w500,                color: Colors.black,                fontSize: 14,              ),            ),          ),        ),      ),    );  }}