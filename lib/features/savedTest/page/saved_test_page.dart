import 'dart:convert';import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intalim/app/router.dart';import '../../../common/services/utils/utils.dart';import '../../../common/widgets/appbar.dart';import '../../lessons/model/lesson_data.dart';import '../../savedTest/block/saved_tests_bloc.dart';import '../../savedTest/model/saved_test_data.dart';import '../../savedTest/model/saved_tests_event.dart';import '../../savedTest/repository/saved_tests_repository.dart';import '../../subjectTest/model/subject_test_data.dart';import '../block/saved_tests_bloc.dart';import '../model/saved_test_data.dart';import '../model/saved_tests_event.dart';import '../repository/saved_tests_repository.dart';class SavedTestsPageWithRepo extends StatelessWidget {  const SavedTestsPageWithRepo({super.key});  @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => SavedTestsBloc(context.read<SavedTestsRepository>()),      child: const SavedTestsScreen(),    );  }}class SavedTestsScreen extends StatefulWidget {  const SavedTestsScreen({super.key});  @override  State<SavedTestsScreen> createState() => _SavedTestsScreen();}class _SavedTestsScreen extends State<SavedTestsScreen> {  late SavedTestsBloc _savedTestsBloc;  @override  void initState() {    _savedTestsBloc = BlocProvider.of<SavedTestsBloc>(context);    _savedTestsBloc.add(SavedTestsEventData());    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(        child: Scaffold(            appBar: PreferredSize(              preferredSize: Size.fromHeight(100.0),              child: CustomAppBar(titleName: "saved_test".tr()),            ),            backgroundColor: Utils.backColor,            body: StreamBuilder<List<SavedTestData>>(              stream: _savedTestsBloc.savedTestFromLocal,              builder: (context, snapshot) {                if (snapshot.hasData) {                  final tasks = snapshot.data;                  return ListView.builder(                    itemCount: tasks?.length,                    itemBuilder: (context, index) {                      return SavedTestItem(savedTestData: tasks?[index]);                    },                  );                } else {                  return Center(child: Text("loading".tr()));                }              },            )));  }}class SavedTestItem extends StatelessWidget {  final SavedTestData? savedTestData;  const SavedTestItem({required this.savedTestData});  // final Map<String, dynamic> data2;  @override  Widget build(BuildContext context) {    Name name =  Name.fromJson(json.decode(savedTestData?.name??""));    return Card(      margin: EdgeInsets.all(8.0),      color: Colors.white,      shape: RoundedRectangleBorder(        borderRadius: BorderRadius.all(Radius.circular(8.0)),      ),      elevation: 0.0,      child: InkWell(        onTap: () {          router.push(              Routes.startTest,              extra: {                "testId": savedTestData?.id??0,                "typeId": savedTestData?.type,                "testName": savedTestData?.type == 0 ? name.uz??"" : "${"ticket".tr()} ${savedTestData?.testId ??0}",              }          );        },        child: Padding(          padding: EdgeInsets.all(8.0),          child: Row(            children: [              Image.asset(                'assets/images/subject_test.png',                width: 40.0,                height: 40.0,                fit: BoxFit.cover,              ),              Expanded(                child: Column(                  crossAxisAlignment: CrossAxisAlignment.start,                  children: [                    Padding(                      padding: EdgeInsets.only(left: 8.0, right: 8.0),                      child: Text(                         savedTestData?.type == 0 ? name.uz??"" : "${"ticket".tr()} ${savedTestData?.testId ??0}",                         // name.uz??"fgnfgn",                        style: TextStyle(                          fontFamily: 'Montserrat',                          fontWeight: FontWeight.w600,                          color: Colors.black,                          fontSize: 14.0,                        ),                      ),                    ),                    Padding(                      padding: EdgeInsets.only(left: 8.0, right: 8.0, top: 4, bottom: 4),                      child: Text(                        "${"be_finished".tr()} ${savedTestData?.maxResultPercent}%",                        style: TextStyle(                          fontFamily: 'Montserrat',                          fontWeight: FontWeight.w600,                          color: Utils.defTextColor,                          fontSize: 14.0,                        ),                      ),                    ),                  ],                ),              ),              // Image.asset(              //   'assets/images/more.png',              //   width: 30.0,              //   height: 30.0,              //   fit: BoxFit.cover,              // ),            ],          ),        ),      ),    );  }}