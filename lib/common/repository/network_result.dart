import 'dart:async';import 'dart:convert';import 'dart:io';import 'package:easy_localization/easy_localization.dart';import 'package:http/http.dart';import 'package:meta/meta.dart';@immutableabstract class NetworkResult<T> {  final T? data;  final String? message;  final int? code;  const NetworkResult({required this.data, required this.message, required this.code});}class Success<T> extends NetworkResult<T> {  const Success({T? data}) : super(data: data, message: "", code: 0);}class Error<T> extends NetworkResult<T> {  const Error({String? message, T? data, int? code}) : super(data: data, message: message, code: code);}class Loading<T> extends NetworkResult<T> {  const Loading() : super(data: null, message: "", code: 0);}Future<NetworkResult<T>> handleResponse<T>(Response response) async {  switch (response.statusCode) {    case 200:      {        final dynamic data = json.decode(response.body) as T;        return Success(data: data);      }    case 401:      {        return Error(message: "Login yoki parol noto'g'ri kiritildi", data: null, code: 401);      }    case 403:      {        Map<String, dynamic>? jsonObject;        try {          jsonObject = json.decode(response.body);        } catch (e) {          return Error(message: "Error decoding JSON", data: null, code: 403);        }        final errorMessage = jsonObject?["message"]?.toString();        return Error(message: errorMessage ?? "error 403", data: null, code: 403);      }    case 404:      {        return Error(message: "Not found", data: null, code: 404);      }    case 422:      {        Map<String, dynamic>? jsonObject;        try {          jsonObject = json.decode(response.body);          final errorMessage = jsonObject?["errors"]?.toString();          return Error(message: errorMessage ?? "422 error", data: null, code: 422);        } catch (e) {          return const Error(message: "Error decoding JSON", data: null, code: 422);        }      }    case 500:      return Error(message: "Server bilan aloqa yo'q", data: null, code: 500);    default:      return Error(message: "Xatolik: ${response.statusCode} ${response.body.toString()}", data: null, code: response.statusCode);  }}NetworkResult<T> catchErrors<T>(Object e) {  if (e is SocketException || e is HttpException || e is TimeoutException) {    return Error(message: 'bad_network_message'.tr());  } else {    return Error(message: 'another_error'.tr() + e.toString());  }}