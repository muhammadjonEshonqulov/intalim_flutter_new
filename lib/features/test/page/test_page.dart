import 'package:easy_localization/easy_localization.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intalim/app/router.dart';import 'package:intalim/common/services/utils/utils.dart';import '../../../app/app.dart';import '../../../common/repository/network_result.dart';import '../../../db/cache.dart';import '../block/tests_bloc.dart';import '../model/tests_event.dart';import '../repository/tests_repository.dart';class TestsPageWithRepo extends StatefulWidget {  const TestsPageWithRepo({super.key});  @override  State<TestsPageWithRepo> createState() => _TestsPageWithRepoState();}class _TestsPageWithRepoState extends State<TestsPageWithRepo> {  // const TestsPageWithRepo({super.key}); @override  Widget build(BuildContext context) {    return BlocProvider(      create: (context) => TestsBloc(context.read<TestsRepository>()),      child: const TestsScreen(),    );  }}class TestsScreen extends StatefulWidget {  const TestsScreen({super.key});  @override  State<TestsScreen> createState() => _TestsScreenState();}class _TestsScreenState extends State<TestsScreen> {  late TestsBloc _testsBloc;  @override  void initState() {    _testsBloc = BlocProvider.of<TestsBloc>(context);    _testsBloc.add(TestsEventData());    _updateCountAndPer();    super.initState();  }  var getStudentTestSubjects = 0;  var getStudentTestSubjectsPer = 0.0;  var getStudentTestTemplates = 0;  var getStudentTestTemplatesPer = 0.0;  var getSavedTopic = 0;  var getSavedTopicPer = 0.0;  Future<void> _updateCountAndPer() async {    getStudentTestSubjectsPer = await cache.getDouble(cache.getStudentTestSubjectsPer) ?? 0;    getStudentTestSubjects = await cache.getInt(cache.getStudentTestSubjects) ?? 0;    getStudentTestTemplatesPer = await cache.getDouble(cache.getStudentTestTemplatesPer) ?? 0;    getStudentTestTemplates = await cache.getInt(cache.getStudentTestTemplates) ?? 0;    getSavedTopicPer = await cache.getDouble(cache.getSavedTopicPer) ?? 0;    getSavedTopic = await cache.getInt(cache.getSavedTopic) ?? 0;    setState(() async {      // kprint(getStudentTestSubjectsPer);      // kprint(getStudentTestSubjects);    });  }  @override  Widget build(BuildContext context) {    return Scaffold(        backgroundColor: Colors.white,        body: BlocConsumer<TestsBloc, NetworkResult>(listener: (context, state) {          if (state is Error) {            snack(context, state.message.toString());            kprint("error -> ${state.message}");          } else if (state is Success) {            kprint("Succec");            _updateCountAndPer();            // hideLoading(); router.go(Routes.main);          } else if (state is Loading) {            kprint("Loading...");            // showLoading(context);} else {            // hideLoading(); snack(context, state.message.toString());          }        }, builder: (context, state) {          return Column(            children: [              InkWell(                onTap:() => {                  router.push(Routes.subjectTest)                },                  child: buildTestItem("lesson_test_back", "lesson_test".tr(), "$getStudentTestSubjects ${"count_of_tests".tr()}", "$getStudentTestSubjectsPer% ${"done".tr()}")),              buildTestItem("template_test_back", "template_tests".tr(), "$getStudentTestTemplates ${"count_of_tests".tr()}", "$getStudentTestTemplatesPer% ${"done".tr()}"),              buildTestItem("saved_test_back", "saved_tests".tr(), "$getSavedTopic ${"count_of_tests".tr()}", "$getSavedTopicPer% ${"done".tr()}"),            ],          );        }));  }  Widget buildTestItem(String imageAsset, String title, String countText, String donePer) {    return FrameLayout(      imageAsset: imageAsset,      title: title,      countText: countText,      donePer: donePer,    );  }}class FrameLayout extends StatefulWidget {  final String imageAsset;  final String title;  final String countText;  final String donePer;  FrameLayout({    required this.imageAsset,    required this.title,    required this.countText,    required this.donePer,  });  @override  State<FrameLayout> createState() => _FrameLayoutState();}class _FrameLayoutState extends State<FrameLayout> {  @override  Widget build(BuildContext context) {    return Stack(      children: [        Transform.translate(          offset: Offset(0.0, 10.0),          child: Transform.scale(              scaleY: 1.18,              scaleX: 1.01,              child: Image.asset(                'assets/images/${widget.imageAsset}.png',                width: double.infinity,                fit: BoxFit.cover,                alignment: Alignment.center,              )),        ),        Container(          margin: EdgeInsets.fromLTRB(30, 25, 16, 0),          padding: EdgeInsets.only(bottom: 0),          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Text(                widget.title,                style: TextStyle(fontFamily: 'Montserrat', color: Colors.white, fontSize: 16, fontWeight: FontWeight.w500),              ),              SizedBox(height: 8),              Text(                " ${widget.countText}",                style: TextStyle(                  fontFamily: 'Montserrat',                  color: Colors.white,                  fontSize: 17,                  fontWeight: FontWeight.w700,                ),              ),              SizedBox(height: 8),              Container(                decoration: BoxDecoration(                  borderRadius: BorderRadius.circular(16.0), // Set corner radius                  color: Color.fromRGBO(255, 255, 255, 0.2), // Set semi-transparent background color                  border: Border.all(                    width: 1.0, color: Colors.white, // Set border color                  ),                ),                padding: EdgeInsets.only(left: 8.0, right: 8.0, top: 4.0, bottom: 4.0),                child: Text(                  " ${widget.donePer}",                  style: TextStyle(                    fontFamily: 'Montserrat',                    color: Colors.white,                    fontSize: 14,                    fontWeight: FontWeight.w500,                  ),                  key: Key(widget.donePer),                ),              ),            ],          ),        ),      ],    );  }}